service:
  name: serverless-typescript

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

custom:
  webpack: ${file(../../common.yml):custom.webpack}
  dynamodb: 	
    start:	
      port: 8000	
      inMemory: true	
      migrate: true	
    migration:	
      dir: ../../offline/migrations	
    stages:	
      - dev 

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DYNAMODB_TABLE: ${self:service.name}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  index:
    handler: list.handle
    events:
      - http:
          method: get
          path: todos
          cors: true
  create:
    handler: create.handle
    events:
      - http:
          method: post
          path: todos
          cors: true
  read:
    handler: read.handle
    events:
      - http:
          method: get
          path: todos/{id}
          cors: true
  update:
    handler: update.handle
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true
  delete:
    handler: delete.handle
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:	
  Resources:	
    TodosDynamoDbTable:	
      Type: 'AWS::DynamoDB::Table'	
      DeletionPolicy: Retain	
      Properties:	
        AttributeDefinitions:	
          -	
            AttributeName: id	
            AttributeType: S	
        KeySchema:	
          -	
            AttributeName: id	
            KeyType: HASH	
        BillingMode: PAY_PER_REQUEST	
        TableName: ${self:provider.environment.DYNAMODB_TABLE} 